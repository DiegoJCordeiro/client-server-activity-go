// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package sqlc

import (
	"context"
	"database/sql"
)

const deleteQuotation = `-- name: DeleteQuotation :exec
UPDATE Quotations SET deleted_at = ? WHERE id = ?
`

type DeleteQuotationParams struct {
	DeletedAt sql.NullTime
	ID        string
}

func (q *Queries) DeleteQuotation(ctx context.Context, arg DeleteQuotationParams) error {
	_, err := q.db.ExecContext(ctx, deleteQuotation, arg.DeletedAt, arg.ID)
	return err
}

const insertQuotation = `-- name: InsertQuotation :exec
INSERT INTO Quotations(id, bid, ask, timestamp, created_at) Values (?, ?, ?, ?, ?)
`

type InsertQuotationParams struct {
	ID        string
	Bid       sql.NullString
	Ask       sql.NullString
	Timestamp sql.NullString
	CreatedAt sql.NullTime
}

func (q *Queries) InsertQuotation(ctx context.Context, arg InsertQuotationParams) error {
	_, err := q.db.ExecContext(ctx, insertQuotation,
		arg.ID,
		arg.Bid,
		arg.Ask,
		arg.Timestamp,
		arg.CreatedAt,
	)
	return err
}

const queryAllQuotation = `-- name: QueryAllQuotation :many
SELECT id, bid, ask, timestamp, created_at, deleted_at, updated_at FROM Quotations ORDER BY created_at
`

func (q *Queries) QueryAllQuotation(ctx context.Context) ([]Quotation, error) {
	rows, err := q.db.QueryContext(ctx, queryAllQuotation)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Quotation
	for rows.Next() {
		var i Quotation
		if err := rows.Scan(
			&i.ID,
			&i.Bid,
			&i.Ask,
			&i.Timestamp,
			&i.CreatedAt,
			&i.DeletedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const queryQuotationById = `-- name: QueryQuotationById :one
SELECT id, bid, ask, timestamp, created_at, deleted_at, updated_at FROM Quotations WHERE id = ?
`

func (q *Queries) QueryQuotationById(ctx context.Context, id string) (Quotation, error) {
	row := q.db.QueryRowContext(ctx, queryQuotationById, id)
	var i Quotation
	err := row.Scan(
		&i.ID,
		&i.Bid,
		&i.Ask,
		&i.Timestamp,
		&i.CreatedAt,
		&i.DeletedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateQuotation = `-- name: UpdateQuotation :exec
UPDATE Quotations SET bid = ? and ask = ? and updated_at = ? WHERE id = ?
`

type UpdateQuotationParams struct {
	Bid       sql.NullString
	Ask       sql.NullString
	UpdatedAt sql.NullTime
	ID        string
}

func (q *Queries) UpdateQuotation(ctx context.Context, arg UpdateQuotationParams) error {
	_, err := q.db.ExecContext(ctx, updateQuotation,
		arg.Bid,
		arg.Ask,
		arg.UpdatedAt,
		arg.ID,
	)
	return err
}
