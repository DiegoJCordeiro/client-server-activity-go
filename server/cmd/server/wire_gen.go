// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"database/sql"
	"github.com/DiegoJCordeiro/golang-study/activity/server/internal/infra/clients"
	"github.com/DiegoJCordeiro/golang-study/activity/server/internal/infra/database/repository"
	"github.com/DiegoJCordeiro/golang-study/activity/server/internal/infra/webserver/handlers/quotation_handler"
	"github.com/DiegoJCordeiro/golang-study/activity/server/internal/usecases/quotation_usecase"
	"github.com/google/wire"
	"net/http"
)

import (
	_ "github.com/mattn/go-sqlite3"
)

// Injectors from wire.go:

func NewQueryQuotationUseCase(db *sql.DB, client *http.Client) *quotation_usecase.QueryQuotationUseCase {
	quotationRepositoryImpl := repository.NewQuotationRepositoryImpl(db)
	quotationClient := clients.NewQuotationClient(client)
	queryQuotationUseCase := quotation_usecase.NewQueryQuotationUseCase(quotationRepositoryImpl, quotationClient)
	return queryQuotationUseCase
}

func NewQueryQuotationHandler(db *sql.DB, client *http.Client) *quotation_handler.QueryAllQuotationsHandler {
	quotationRepositoryImpl := repository.NewQuotationRepositoryImpl(db)
	quotationClient := clients.NewQuotationClient(client)
	queryQuotationUseCase := quotation_usecase.NewQueryQuotationUseCase(quotationRepositoryImpl, quotationClient)
	queryAllQuotationsHandler := quotation_handler.NewQueryAllQuotationsHandler(quotationRepositoryImpl, queryQuotationUseCase)
	return queryAllQuotationsHandler
}

func NewCreateQuotationHandler(db *sql.DB) *quotation_handler.CreateQuotationHandler {
	quotationRepositoryImpl := repository.NewQuotationRepositoryImpl(db)
	createQuotationUseCase := quotation_usecase.NewCreateQuotationUseCase(quotationRepositoryImpl)
	createQuotationHandler := quotation_handler.NewCreateQuotationHandler(quotationRepositoryImpl, createQuotationUseCase)
	return createQuotationHandler
}

func NewDeleteQuotationHandler(db *sql.DB) *quotation_handler.DeleteQuotationHandler {
	quotationRepositoryImpl := repository.NewQuotationRepositoryImpl(db)
	deleteQuotationUseCase := quotation_usecase.NewDeleteQuotationUseCase(quotationRepositoryImpl)
	deleteQuotationHandler := quotation_handler.NewDeleteQuotationsHandler(quotationRepositoryImpl, deleteQuotationUseCase)
	return deleteQuotationHandler
}

func NewUpdateQuotationHandler(db *sql.DB) *quotation_handler.UpdateQuotationHandler {
	quotationRepositoryImpl := repository.NewQuotationRepositoryImpl(db)
	updateQuotationUseCase := quotation_usecase.NewUpdateQuotationUseCase(quotationRepositoryImpl)
	updateQuotationHandler := quotation_handler.NewUpdateQuotationsHandler(quotationRepositoryImpl, updateQuotationUseCase)
	return updateQuotationHandler
}

// wire.go:

var setQuotationRepositoryDependency = wire.NewSet(repository.NewQuotationRepositoryImpl, wire.Bind(new(repository.IQuotationRepository), new(*repository.QuotationRepositoryImpl)))

var setQuotationClientDependency = wire.NewSet(clients.NewQuotationClient, wire.Bind(new(clients.IClient), new(*clients.QuotationClient)))

var setQuotationQueryUseCaseDependency = wire.NewSet(quotation_usecase.NewQueryQuotationUseCase, wire.Bind(new(quotation_usecase.IQuotationUseCase), new(*quotation_usecase.QueryQuotationUseCase)))

var setQuotationUpdateUseCaseDependency = wire.NewSet(quotation_usecase.NewUpdateQuotationUseCase, wire.Bind(new(quotation_usecase.IQuotationUseCase), new(*quotation_usecase.UpdateQuotationUseCase)))

var setQuotationDeleteUseCaseDependency = wire.NewSet(quotation_usecase.NewDeleteQuotationUseCase, wire.Bind(new(quotation_usecase.IQuotationUseCase), new(*quotation_usecase.DeleteQuotationUseCase)))

var setCreateQuotationUseCaseDependency = wire.NewSet(quotation_usecase.NewCreateQuotationUseCase, wire.Bind(new(quotation_usecase.IQuotationUseCase), new(*quotation_usecase.CreateQuotationUseCase)))
